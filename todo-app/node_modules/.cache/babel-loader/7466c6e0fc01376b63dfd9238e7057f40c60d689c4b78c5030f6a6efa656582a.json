{"ast":null,"code":"var _jsxFileName = \"/Users/bentonwestergaard/2023_projects/intrado/react_projects/todo-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer';\nimport TodoForm from './components/TodoForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst todosUrl = \"http://127.0.0.1:3000/todos\";\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: []\n    };\n    this.getTodos = () => {\n      fetch(todosUrl).then(response => response.json()).then(todos => this.setState({\n        todos\n      }));\n    };\n    this.addTodo = newTodo => {\n      this.setState({\n        todos: [...this.state.todos, newTodo]\n      });\n      fetch(todosUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/JSON\"\n        },\n        body: JSON.stringify({\n          newTodo: newTodo\n        })\n        //need key b/c strong params used on backend\n      });\n    };\n    this.updateTodo = updatedTodo => {\n      let todos = this.state.todos.map(todo => todo.id === updatedTodo.id ? updatedTodo : todo);\n      this.setState({\n        todos\n      });\n      fetch(todosUrl + \"/\" + updatedTodo.id, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          todo: updatedTodo\n        })\n      });\n    };\n    this.deleteTodo = id => {\n      let filtered = this.state.todos.filter(todo => todo.id !== id);\n      this.setState({\n        todos: filtered\n      });\n      fetch(todosUrl + \"/\" + id, {\n        method: \"DELETE\"\n      });\n    };\n  }\n  //only runs one time, after initial render.  \n  //running fetch inside componentDidMount rather than, say, componentDidUpdate, is less data intensive.  Especially if app makes multiple api calls.\n  componentDidMount() {\n    this.getTodos();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n        submitAction: this.addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoContainer, {\n        todos: this.state.todos,\n        updateTodo: this.updateTodo,\n        deleteTodo: this.deleteTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","TodoContainer","TodoForm","jsxDEV","_jsxDEV","todosUrl","App","constructor","args","state","todos","getTodos","fetch","then","response","json","setState","addTodo","newTodo","method","headers","body","JSON","stringify","updateTodo","updatedTodo","map","todo","id","deleteTodo","filtered","filter","componentDidMount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","submitAction"],"sources":["/Users/bentonwestergaard/2023_projects/intrado/react_projects/todo-app/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer';\nimport TodoForm from './components/TodoForm';\nconst todosUrl = \"http://127.0.0.1:3000/todos\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  //only runs one time, after initial render.  \n  //running fetch inside componentDidMount rather than, say, componentDidUpdate, is less data intensive.  Especially if app makes multiple api calls.\n  componentDidMount(){\n    this.getTodos()\n  }\n  \n  getTodos = () => {\n    fetch(todosUrl)\n      .then(response => response.json())\n      .then(todos => this.setState({todos}))     \n  }\n\n  addTodo = (newTodo) => {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    })\n\n    fetch(todosUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/JSON\"\n      },\n      body: JSON.stringify({newTodo: newTodo})\n      //need key b/c strong params used on backend\n    })\n  }\n\n  updateTodo = (updatedTodo) => {\n    let todos = this.state.todos.map(todo => todo.id === updatedTodo.id ? updatedTodo : todo)\n\n    this.setState({ todos })\n\n    fetch(todosUrl + \"/\" + updatedTodo.id, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({todo: updatedTodo})\n    })\n  }\n\n  deleteTodo = (id) => {\n    let filtered = this.state.todos.filter(todo => todo.id !== id)\n    this.setState({\n      todos: filtered\n    })\n\n    fetch(todosUrl + \"/\" + id, {\n      method: \"DELETE\"\n    })\n  }\n  \n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Todo App</h1>\n        <TodoForm submitAction={this.addTodo} />\n        <TodoContainer todos={this.state.todos} updateTodo={this.updateTodo} deleteTodo={this.deleteTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}